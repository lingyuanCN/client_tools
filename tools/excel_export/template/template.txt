---@classdef record_#cfg_name#
local record_#cfg_name# = {}
  
#cfg_all_keys#

#cfg_name# = {
    _data = {
#cfg_all_data#
    }
}

local __index_#unique_key_group# = {
#key_reverse_index#
}

local __key_map = {
#key_map#
}

local m = { 
    __index = function(t, k) 
        if k == "toObject" then
            return function()  
                local o = {}
                for key, v in pairs (__key_map) do 
                    o[key] = t._raw[v]
                end
                return o
            end 
        end
        assert(__key_map[k], "cannot find " .. k .. " in record_#cfg_name#")
        return t._raw[__key_map[k]]
    end
}

function #cfg_name#.getLength()
    return ##cfg_name#._data
end

function #cfg_name#.hasKey(k)
  if __key_map[k] == nil then
    return false
  else
    return true
  end
end

--@return @class record_#cfg_name#
function #cfg_name#.indexOf(index)
    if index == nil then
        return nil
    end
    return setmetatable({_raw = #cfg_name#._data[index]}, m)
end

--@return @class record_#cfg_name#
function #cfg_name#.get(#key_params#)
    local k = #unique_key_link#
    return #cfg_name#.indexOf(__index_#unique_key_group#[k])
end

function #cfg_name#.set(#key_params#, key, value)
    local record = #cfg_name#.get(#key_params#)
    if record then
        local keyIndex = __key_map[key]
        if keyIndex then
            record._raw[keyIndex] = value
        end
    end
end

function #cfg_name#.get_index_data()
    return __index_#unique_key_group#
end